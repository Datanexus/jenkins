#!/usr/bin/env ansible-playbook
#
# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# Build our storm and zookeeper host groups
- name: Create jenkins host group
  hosts: localhost
  gather_facts: yes
  vars_files:
    - vars/jenkins.yml
  tasks:
    # load the 'configuration file' (if one was defined) to get any variables
    # we might need during this playbook run
    - name: Load configuration file
      include_vars:
        file: "{{config_file | default('config.yml')}}"
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - block:
      # get a list of the node_map entries for this application
      - set_fact:
          node_map_entries: "{{node_map | selectattr('application', 'equalto', application) | list}}"
      - name: Fail playbook run if no {{application}} entries detected in the node_map
        fail:
          msg: "Missing {{application}} entry in 'node_map'"
        when: (node_map_entries | length) == 0
      - name: Fail playbook run if multiple {{application}} entries detected in the node_map
        fail:
          msg: "Multiple {{application}} entries detected in 'node_map'"
        when: (node_map_entries | length) > 1
      - name: Fail playbook run if attempting a multi-node deployment
        fail:
          msg: "Node count => {{node_map_entries[0].count}}; clustered {{application}} deployments not supported"
        when: node_map_entries[0].count > 1
      # build the jenkins host group from existing inventory
      - include_role:
          name: build-app-host-groups
        vars:
          host_group_list:
            - name: jenkins
      - set_fact:
          num_jenkins_nodes: "{{groups['jenkins'] | default([]) | length}}"
      # if an existing set of Cassandra nodes were found, throw an error unless
      # the reuse_existing_nodes flag was set to 'true' or 'yes')
      - block:
        - name: Fail playbook run if existing nodes found and user did not request reuse
          fail:
            msg: "Found an existing set of nodes - {{((groups['jenkins'] | default([])) | to_yaml).split('\n').0}}; aborting playbook run"
          when: not((reuse_existing_nodes | default(false)) | bool)
        when: num_jenkins_nodes | int > 0
      # if we're deploying instances in an cloud environment, ensure that there
      # are an appropriately tagged set of nodes already (and launch them if
      # they don't exist based on the node_map entries for this application)
      - name: Launch AWS VMs
        include_role:
          name: 'aws'
        when: num_jenkins_nodes | int == 0 and cloud == 'aws'
      - name: Launch OSP VMs
        include_role:
          name: 'osp'
        when: num_jenkins_nodes | int == 0 and cloud == 'osp'
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')


# If we're dynamically provisioning, then do some final configuration on the
# VMs that were just launched (assuming that we're not re-using existing VMs)
- name: Complete OS configuration
  hosts: jenkins
  gather_facts: yes
  vars_files:
    - vars/jenkins.yml
  tasks:
    # first, initialize the play
    - include_role:
        name: initialize-play
      vars:
        gather_facts: false
        skip_network_restart: true
    # if this is a cloud deployment and we need to (re)configure nodes...
    - block:
      # then run the `preflight` role to finish the configuration of the nodes
      # that were just allocated
      - include_role:
          name: preflight
        vars:
          mountpoint: "/data"
      # and set a fact indicating that we (re)configured nodes in this play
      - set_fact:
          configured_nodes: true
      when:
        - cloud is defined and (cloud == 'aws' or cloud == 'osp')
        - ((force_node_reconfig | default(false)) | bool) or not(hostvars['localhost']['matching_instances_found'])

# And deploy jenkins to the nodes in the `jenkins` host group; note
# that if there is more than one node in the `jenkins` host group, then an
# error will be thrown; this playbook does not support deployment of an
# jenkins cluster
- name: Install/configure jenkins
  hosts: jenkins
  gather_facts: no
  vars_files:
    - vars/jenkins.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(jenkins_package_list) | union((install_packages_by_tag|default({})).jenkins|default([])) }}"
    - jenkins_nodes: "{{groups['jenkins']}}"
  pre_tasks:
    # first, initialize the play
    - include_role:
        name: initialize-play
      vars:
        skip_network_restart: "{{configured_nodes | default(false)}}"
  roles:
    # now that we have all of the facts we need, provision the input nodes
    - role: jenkins
